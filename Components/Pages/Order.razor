@page "/customerorder"
@using Bislerium.Data
@using System.Text.Json
@using iTextSharp.text
@using iTextSharp.text.pdf
@inject IJSRuntime JSRuntime


@if (!string.IsNullOrEmpty(_addOrderErrorMessage))
{
    <AlertMessage Type="danger" Message="@_addOrderErrorMessage" />
}
<nav class="navbar navbar-light bg-light justify-content-between">
    <h1 class="navbar-brand mb-0 h1">Order</h1>
    <button class="btn btn-primary" type="button" @onclick="OpenAddCoffeeDialog">
        <span class="oi oi-plus" /> Add
    </button>
</nav>
<div class="d-flex flex-row align-items-center mb-3">
    <!-- Sort Dropdown -->
    <div class="dropdown me-2">
        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            Sort
        </button>
        <ul class="dropdown-menu">
            <li><button class="dropdown-item" @onclick="() => SortOrders(SortDirection.Ascending)">Ascending</button></li>
            <li><button class="dropdown-item" @onclick="() => SortOrders(SortDirection.Descending)">Descending</button></li>
        </ul>
    </div>

    <!-- Search Input -->
    <input type="text" @oninput="SearchTaskName" class="form-control me-2" placeholder="Search..." style="width: auto;" />

    <!-- Date Picker -->
    <input type="date" @bind="_date" class="form-control me-2" style="width: auto;" />

    <!-- PDF Generate Button -->
    <button class="btn btn-outline-success" @onclick="GeneratePDF">PDF Generate</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th style="width: 10%; white-space: nowrap;">Customer Name</th>     @* Table for orders with styling *@
            <th style="width: 10%; white-space: nowrap;">Customer No.</th>
            <th style="width: 10%; white-space: nowrap;">Coffee</th>
            <th style="width: 10%; white-space: nowrap;">Add-Ins</th>
            <th style="width: 10%; white-space: nowrap;">Discount</th>
            <th style="width: 10%; white-space: nowrap;">Coffee Price</th>
            <th style="width: 10%; white-space: nowrap;">AddIns Price</th>
            <th style="width: 10%; white-space: nowrap;">Created At</th>

        </tr>
    </thead>
    <tbody>
        @foreach (var data in _order)
        {
            <tr>
                <td>@data.CustomerName</td>      @* Data for orders *@
                <td>@data.CustomerNumber</td>
                <td>@data.CoffeeName</td>
                <td>@data.AddInsName</td>
                <td>@data.Discount</td>
                <td>@data.CoffeePrice</td>
                <td>@data.AddInsPrice</td>
                <td>@data.CreatedAt.ToShortDateString()</td>
            </tr>
        }
    </tbody>
</table>
@if (_showAddOrderDialog)
{
    <ModalDialog Title="@_dialogTitle" OkLabel="@_dialogOkLabel" OnClose="@OnAddOrderDialogClose">
        <form>

            <div class="form-floating mb-1">
                <select class="form-select" @onchange="CoffCalculate">
                    <option selected>select Coffee</option>
                    @foreach (var c in _coffee)
                    {
                        <option>@c.Name</option>
                    }
                </select>
                <label for="floatingPassword">Coffee</label>
            </div>
            <div class="form-floating mb-1">
                <select class="form-select" @onchange="AddInCalculate">
                    <option selected>select Add-Ins</option>
                    @foreach (var c in _addins)
                    {
                        <option>@c.Name</option>
                    }
                </select>
                <label for="floatingPassword">Add-Ins</label>
            </div>
            <div class="form-floating mb-3">
                <select class="form-select" @onchange="CustomerCalculate">
                    <option selected>select customer</option>
                    @foreach (var c in _customer)
                    {
                        <option value="@c.Number">@c.Name</option>
                    }
                </select>
                <label for="floatingInput">Customer</label>
            </div>
            <div style="text-align:right;">
                <label>Coffee Price: @CoffCal</label><br>
                <label>Add-Ins Price: @AddInCal</label><br>
                <label>Discount: @_discount</label><br>
                <label>Total: @Total</label>
            </div>


            @if (!string.IsNullOrEmpty(_addOrderErrorMessage))
            {
                <AlertMessage Type="danger" Message="@_addOrderErrorMessage" />
                //Throw error message
            }

        </form>
    </ModalDialog>
}
<script>
    window.saveAsFile = function (fileName, byteBase64, contentType) {    //Generate PDF and exception handled
        try {
            const link = document.createElement('a');
            link.href = `data:${contentType};base64,${byteBase64}`;
            link.download = fileName;
            link.click();
            alert('pdf has generated and downloaded to download... ');
        } catch (error) {
            console.error('Error occurred during file download:', error);
            alert('Error occurred during file download:');
        }
    };

</script>
@code {
    private Guid? _id { get; set; } = null;
    private DateTime? _date { get; set; }
    private string _cusName { get; set; }
    private string _cusNumber { get; set; }
    private string _coffName { get; set; }
    private string _discount { get; set; } = "0%";
    private string _status { get; set; }
    private string _addInName { get; set; }
    private GlobalState _globalState { get; set; }
    private bool _showAddOrderDialog { get; set; }
    private List<Coffees> _coffee { get; set; }
    private string _addOrderErrorMessage { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private List<Customers> _customer { get; set; }
    private List<AddIns> _addins { get; set; }
    private List<Orders> _order { get; set; }
    Decimal CoffCal = 0;
    Decimal AddInCal = 0;
    Decimal Total = 0;
    int Count = 0;
    protected override void OnInitialized()
    {
        _order = OrderService.GetAll();


    }

    // Method to calulate top 5 most sold  coffee
    private List<(string Name, int Count)> GetTop5SoldCoffees()
    {
        return _order
            .GroupBy(o => o.CoffeeName)
            .Select(group => (Name: group.Key, Count: group.Count()))
            .OrderByDescending(g => g.Count)
            .Take(5)
            .ToList();
    }
    // Method to calulate top 5 most sold  AddIns
    private List<(string Name, int Count)> GetTop5SoldAddIns()
    {
        return _order
            .GroupBy(o => o.AddInsName)
            .Select(group => (Name: group.Key, Count: group.Count()))
            .OrderByDescending(g => g.Count)
            .Take(5)
            .ToList();
    }

    private async Task GeneratePDF()
    {
        List<Orders> cus = OrderService.GetAll();

        // Filter orders for the specified date (_date)
        List<Orders> customerDate = cus.Where(x =>
     (x.CreatedAt != null && x.CreatedAt.Date.ToString("dd/MM/yyyy") == (_date.HasValue ? _date.Value.Date.ToString("dd/MM/yyyy") : DateTime.Now.Date.ToString("dd/MM/yyyy")))
     ).ToList();

        try
        {
            _addOrderErrorMessage = "";

            if (customerDate.Count != 0)
            {
                using (MemoryStream memoryStream = new MemoryStream())
                {
                    Document document = new Document(PageSize.A4);
                    PdfWriter.GetInstance(document, memoryStream);
                    document.Open();

                    // Fonts
                    BaseFont bfArial = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
                    Font fontHeader = new Font(bfArial, 12, Font.BOLD);
                    Font fontNormal = new Font(bfArial, 10);

                    // Company name
                    Paragraph companyName = new Paragraph("Bislerium Cafe", fontHeader);
                    companyName.Alignment = Element.ALIGN_CENTER;
                    document.Add(companyName);

                    // Current date and time
                    Paragraph dateTime = new Paragraph(DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"), fontNormal);
                    dateTime.Alignment = Element.ALIGN_CENTER;
                    document.Add(dateTime);

                    document.Add(new Paragraph(" "));

                    PdfPTable table = new PdfPTable(5) { WidthPercentage = 100 };

                    // Headers table
                    table.AddCell("Customer Name");
                    table.AddCell("Customer Number");
                    table.AddCell("Coffee");
                    table.AddCell("Add-Ins");
                    table.AddCell("Total");

                    // Data rows to the table
                    decimal totalRevenue = 0m; // 'm' denotes a decimal literal

                    foreach (var order in customerDate)
                    {
                        table.AddCell(order.CustomerName);
                        table.AddCell(order.CustomerNumber.ToString());
                        table.AddCell(order.CoffeeName);
                        table.AddCell(order.AddInsName);
                        table.AddCell(order.TotalPrice);

                        // String TotalPrice to a decimal 
                        if (decimal.TryParse(order.TotalPrice, out decimal orderTotal))
                        {
                            totalRevenue += orderTotal;
                        }
                        else
                        {
                            continue;
                        }
                    }
                    string totalRevenueDisplay = totalRevenue.ToString("");

                    // Add the Total Revenue row to the table
                    table.AddCell(new PdfPCell(new Phrase("Total Revenue", fontHeader))
                        {
                            Colspan = 4,
                            HorizontalAlignment = Element.ALIGN_RIGHT
                        });
                    table.AddCell(new PdfPCell(new Phrase(totalRevenueDisplay, fontHeader))
                        {
                            HorizontalAlignment = Element.ALIGN_RIGHT
                        });

                    document.Add(table);

                    document.Add(new Paragraph(" ")); // Add a spacer

                    // Add top 5 sold coffees
                    List<(string Name, int Count)> topCoffees = GetTop5SoldCoffees();
                    Paragraph topCoffeesHeader = new Paragraph("Top 5 Coffees", fontHeader);
                    document.Add(topCoffeesHeader);
                    foreach (var coffee in topCoffees)
                    {
                        document.Add(new Paragraph($"{coffee.Name}: {coffee.Count} times", fontNormal));
                    }

                    document.Add(new Paragraph(" ")); // Adding a spacer

                    // Add top 5 sold add-ins
                    List<(string Name, int Count)> topAddIns = GetTop5SoldAddIns();
                    Paragraph topAddInsHeader = new Paragraph("Top 5 Add-Ins", fontHeader);
                    document.Add(topAddInsHeader);
                    foreach (var addIn in topAddIns)
                    {
                        document.Add(new Paragraph($"{addIn.Name}: {addIn.Count} times", fontNormal));
                    }
                    document.Close();

                    byte[] bytes = memoryStream.ToArray();
                    memoryStream.Close();


                    string fileName = $"MonthlyReport_{_date?.ToString("yyyyMMdd") ?? DateTime.MinValue.ToString("yyyyMMdd")}.pdf";

                    await JSRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(bytes), "application/pdf");
                }
            }
            else
            {
                throw new Exception("There is no any data!!!");
            }
        }
        catch (Exception e)
        {
            _addOrderErrorMessage = e.Message;
        }
    }

    //Search Order table
    private void SearchTaskName(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString();
        _order = OrderService.GetAll().Where(t =>
            t.CustomerName.ToLower().Contains(searchTerm.ToLower())).ToList();


    }

    //shorting
    private void SortOrders(SortDirection direction)
    {
        if (direction == SortDirection.Ascending)
        {
            _order = _order.OrderBy(o => o.CustomerName).ToList();
        }
        else if (direction == SortDirection.Descending)
        {
            _order = _order.OrderByDescending(o => o.CustomerName).ToList();
        }
    }


    private enum SortDirection
    {
        Ascending,
        Descending
    }

    private void BubbleSort()    //Bubble sort
    {
        List<Orders> cus = OrderService.GetAll();

        List<string> customerNumbers = cus.Select(c => c.CustomerNumber).ToList();

        bool flag = true;
        int numLength = customerNumbers.Count;

        for (int i = 1; (i <= (numLength - 1)) && flag; i++)
        {
            flag = false;
            for (int j = 0; j < (numLength - 1); j++)
            {
                if (customerNumbers[j + 1].CompareTo(customerNumbers[j]) > 0)
                {
                    string temp = customerNumbers[j];
                    customerNumbers[j] = customerNumbers[j + 1];
                    customerNumbers[j + 1] = temp;
                    flag = true;
                }
            }
        }

        List<Orders> sortedOrders = customerNumbers.Select(cn => cus.First(c => c.CustomerNumber == cn)).ToList();
        _order = sortedOrders;

    }

    private void OpenAddCoffeeDialog()    //Add Orders
    {
        _dialogTitle = "Add Order";
        _dialogOkLabel = "Add";
        _showAddOrderDialog = true;

        _id = null;
        _customer = CustomerService.GetAll();
        _coffee = CoffeeService.GetAll();
        _addins = AddInsService.GetAll();

    }

    //Add Order
    private void OnAddOrderDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showAddOrderDialog = false;
        }
        else
        {
            try
            {
                _addOrderErrorMessage = "";
                if (!string.IsNullOrEmpty(_cusName) && !string.IsNullOrEmpty(_coffName.ToString()))    //Display Customer data
                {
                    List<Orders> ord = OrderService.GetAll();
                    if (string.IsNullOrEmpty(_id.ToString()))
                    {

                        ord.Add(
                            new Orders
                                {
                                    CustomerName = _cusName,
                                    CustomerNumber = _cusNumber,
                                    Discount = _discount,
                                    CoffeeName = _coffName,
                                    AddInsName = _addInName,
                                    CoffeePrice = CoffCal.ToString(),
                                    AddInsPrice = AddInCal.ToString(),
                                    TotalPrice = Total.ToString(),
                                    CreatedAt = DateTime.Now,
                                }
                            );

                    }
                    else
                    {
                        // Coffees c = coffee.FirstOrDefault(x => x.Id == _id);
                        // if (c == null)
                        // {
                        //     throw new Exception("Coffee not found.");
                        // }
                        // c.Name = _name;
                        // c.Price = _price;
                    }
                    if (!Directory.Exists(Utility.GetAppDirectoryPath()))       //using Utility Service
                    {
                        Directory.CreateDirectory(Utility.GetAppDirectoryPath());
                    }

                    var json = JsonSerializer.Serialize(ord);
                    File.WriteAllText(Utility.GetAppOrderFilePath(), json);    // Read JSON
                    _order = OrderService.GetAll();
                    _showAddOrderDialog = false;
                    CoffCal = 0;
                    AddInCal = 0;
                    Total = 0;
                    _discount = "0%";
                    Count = 0;
                    _cusName = "Select Customer";
                    _coffName = "Select Coffee";
                    _addInName = "Select AddIns";
                }
                else
                {
                    throw new Exception("name or price are empty");   //Exception Handling
                }



            }
            catch (Exception e)
            {
                _addOrderErrorMessage = e.Message;
            }
        }
    }

    private void OpenEditOrderDialog(Coffees coff)   // Edit Coffe orders
    {
        _dialogTitle = "Edit Order";
        _dialogOkLabel = "Update";
        _id = coff.Id;

        _showAddOrderDialog = true;
    }
    private void OpenDeleteOrderDialog(Coffees coff)
    {
        try
        {
            List<Coffees> coffee = CoffeeService.GetAll();
            _id = coff.Id;
            Coffees c = coffee.FirstOrDefault(x => x.Id == _id);
            if (c == null)
            {
                throw new Exception("Coffee not found.");
            }
            coffee.Remove(c);
            if (!Directory.Exists(Utility.GetAppDirectoryPath()))
            {
                Directory.CreateDirectory(Utility.GetAppDirectoryPath());
            }

            var json = JsonSerializer.Serialize(coffee);
            File.WriteAllText(Utility.GetAppCoffeeFilePath(), json);
            _coffee = CoffeeService.GetAll();

        }
        catch (Exception e)
        {
            _addOrderErrorMessage = e.Message;
        }


    }

    private void CustomerCalculate(ChangeEventArgs e)    //Giving Complementary after purchasing 10 coffee
    {
        _cusNumber = e.Value.ToString().Trim();
        List<Customers> cus = CustomerService.GetAll();
        Customers c = cus.FirstOrDefault(x => x.Number == _cusNumber);
        List<Orders> ord = OrderService.GetAll();
        int o = ord.Count(x => x.CustomerNumber == _cusNumber);
        _cusName = c.Name;
        _status = c.Status;
        decimal Sum = CoffCal + AddInCal;
        if (o == 10)
        {
            _discount = "free";
            Total = 0;
        }
        else
        {
            if (_status == "Member")     //Normal Custumer can't have discount
            {
                _discount = "10%";
                decimal discountAmount = 10m / 100m;
                Total = Sum - (discountAmount * Sum);
            }
            else
            {
                _discount = "0%";
                Total = Sum;
            }
        }



    }
    private void CoffCalculate(ChangeEventArgs e)
    {
        _coffName = e.Value.ToString().Trim();
        List<Coffees> Coffe = CoffeeService.GetAll();
        string searchValue = e.Value.ToString().Trim();
        Coffees data = Coffe.FirstOrDefault(x => x.Name == searchValue);
        if (data != null)
        {
            decimal price = Convert.ToDecimal(data.Price);
            CoffCal = price;

        }


    }
    private void AddInCalculate(ChangeEventArgs e)     //Calculation of Price
    {
        _addInName = e.Value.ToString().Trim();
        List<AddIns> a = AddInsService.GetAll();
        string searchValue = e.Value.ToString().Trim();
        AddIns data = a.FirstOrDefault(x => x.Name == searchValue);
        if (data != null)
        {
            decimal price = Convert.ToDecimal(data.Price);
            AddInCal = price;

        }
    }
}